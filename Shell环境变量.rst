Shell环境变量使用
==========
所有的环境变量名均使用大写字母，这是bash shell的标准惯例。

如果是你自己创建的局部变量或是shell脚本，请使用小写字母。变量名区分大小写。在涉及用户定义的局部变量时坚持使用小写字母，这能够避免重新定义系统环境变量可能带来的灾难。

变量名、等号和值之间没有空格。

要给某个环境变量设置多个值，可以把值放在括号里，值与值之间用空格分隔。::

$ test=(one two three four five) 

要引用一个单独的数组元素，就必须用代表它在数组中位置的数值索引值。索引值要用方括号括起来。::

$ echo ${mytest[2]}

要显示整个数组变量，可用星号作为通配符放在索引值的位置。::

$ echo ${mytest[*]}

引用环境变量格式：

使用花括号可以控制变量名的范围，这样就可以在变量后面紧接其他字符。

+ ${var} 引用环境变量时，花括号包含的字符当成变量名，替换成变量的值，花括号后跟着的字符直接加在后面，不替换。
+ $var 不加花括号时，$符号后面的所有字符全当成变量名，替换成变量的值。
+ ${var:-bbb} 给环境变量设置默认值。如果环境变量没有设置值或为空，返回 - 后的内容，这里是bbb
+ ${var:+aaa} 与 - 相反。如果环境变量有设置值，返回 + 后的内容，这里是aaa
+ {var-bbb} 给环境变量设置默认值。如果环境变量没有设置值，返回 - 后的内容，这里是bbb。(空值及非空值時不作处理)
+ {var+bbb} 与 - 相反。如果环境变量有设置值或为空，返回 - 后的内容，这里是bbb。 (非空值時不作处理)
+ ${var=bbb} 若 var 沒设定值，則使用 bbb 作返回值，同时將 var 賦值為 bbb 。 (空值及非空值時不作处理)
+ ${var:=bbb} 若 var 沒设定值或為空值，則使用 bbb 作返回值，同时將 var 賦值為 bbb 。 (非空值時不作处理)
::

  a="aaa"
  b="bbb"
  echo $ab
  显示为 空
  echo ${a}b
  显示为 aaab
  echo ${a}${b}
  显示为 aaabbb
  echo ${ab:-abab}
  显示为 aaabbb
  echo ${a:+bbb}
  显示为 bbb

模式匹配替换结构:
+++++++++++++++++++++
* ${var%pattern}
   从右边开始匹配, 非贪婪模式
* ${var%%pattern}
   从右边开始匹配, 贪婪模式
* ${var#pattern}
   从左边开始匹配, 非贪婪模式
* ${var##pattern}
   从左边开始匹配, 贪婪模式
* ${var:x:y}
   从x位置开始取y个字符。
* ${var/x/y}
   将第一个x替换成y
* ${var//x/y}
   将第所有x替换成y

结构中的pattern支持通配符

* \* 表示零个或多个任意字符
* ?表示零个或一个任意字符
* [...]表示匹配中括号里面的字符
* [!...]表示不匹配中括号里面的字符
**返回的内容是var去掉pattern的那部分字符串的值**

记忆的方法为：
+++++++++++++
* #是去掉左边（键盘上#在 $ 的左边）
* %是去掉右边（键盘上% 在$ 的右边）
* 单一符号是最小匹配；两个符号是最大匹配

常用的shell中带有$符号的几个变量的含义：
++++++++++++++++++++++++++++++++++++++++
@ *区别：

* 相同点：都是引用所有参数
* 不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数（分别存储在1 2 3）则"*" 等价于 “1 2 3"（传递了一个参数）；而“@" 等价于 "1" "2"  "$3"（传递了三个参数）

变量说明: 
+++++++++
* $$ ——Shell本身的PID（ProcessID） 
* $! ——Shell最后运行的后台Process的PID 
* $? ——最后运行的命令的结束代码（返回值） 
* $- ——使用Set命令设定的Flag一览 
* $* ——所有参数列表。如"$*"用 [ ] 括起来的情况、以"$1 $2 … $n"的形式输出所有参数。 
* $@ ——所有参数列表。如"$@"用 [ ] 括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。 
* $# ——添加到Shell的参数个数 
* $0 ——Shell本身的文件名 
* $1～$n ——添加到Shell的各参数值。$1是第1参数、$2是第2参数…。

关于set -- $@ 80
+++++++++++++++++
其作用就是将--后的参数覆盖原位置参数，即使以-开头也不再作为选项

联系上文$@的解释，此命令即为添加追加一个位置参数

::

  test.sh

  #!/bin/bash
  set -- a b c
  echo "\$1=$1"
  echo "\$2=$2"
  echo "\$3=$3"

::

  # 无参数执行test.sh
  test.sh
  # 输出
  # $1=a
  # $2=b
  # $3=c

  # 带参数执行test.sh
  test.sh 1 2 3
  # 输出
  # $1=a
  # $2=b
  # $3=c

::

  test2.sh

  #!/bin/bash
  set -- $@ a b
  echo "\$1=$1"
  echo "\$2=$2"
  echo "\$3=$3"
  echo "\$4=$4"
  
  test2.sh 1 2
  # 输出
  # $1=1
  # $2=2
  # $3=a
  # $4=b