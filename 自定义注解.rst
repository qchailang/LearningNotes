注解的官方定义
===============
    注解是一种能被添加到java代码中的元数据，类、方法、变量、参数和包都可以用注解来修饰。注解对于它所修饰的代码并没有直接的影响。

总结:

#. 注解是一种元数据形式。即注解是属于java的一种数据类型，和类、接口、数组、枚举类似。
#. 注解用来修饰，类、方法、变量、参数、包。
#. 注解不会对所修饰的代码产生直接的影响。

注解的使用范围
===============
#. 为编译器提供信息 - 注解能被编译器检测到错误或抑制警告。
#. 编译时和部署时的处理 - 软件工具能处理注解信息从而生成代码，XML文件等等。
#. 运行时的处理 - 有些注解在运行时能被检测到。

如何自定义注解
===============
    注解其实就是一种标记，可以在程序代码中的关键节点（类、方法、变量、参数、包）上打上这些标记，然后程序在编译时或运行时可以检测到这些标记从而执行一些特殊操作。
自定义注解使用的基本流程：

* 第一步，定义注解——相当于定义标记；
* 第二步，配置注解——把标记打在需要用到的程序代码中；
* 第三步，解析注解——在编译期或运行时检测到标记，并进行特殊操作。

基本语法
=========
    使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型（返回值类型只能是基本类型、Class、String、enum）。可以通过default来声明参数的默认值。

定义注解格式：

　　public @interface 注解名 {定义体}

注解类型的声明部分：
+++++++++++++++++++
注解在Java中，与类、接口、枚举类似，因此其声明语法基本一致，只是所使用的关键字有所不同，注解使用@interface。在底层实现上，所有定义的注解都会自动继承java.lang.annotation.Annotation接口。

.. code:: java

  public @interface CherryAnnotation {
    .......
  }

注解类型的实现部分：
+++++++++++++++++++
根据我们在自定义类的经验，在类的实现部分无非就是书写构造、属性或方法。但是，在自定义注解中，其实现部分只能定义一个东西：注解类型元素（annotation type element）。

.. code:: java

  public @interface CherryAnnotation {
  	public String name();
  	int age() default 18;
  	int[] array();
  }

注解里面定义的是：**注解类型元素**

定义注解类型元素时需要注意如下几点：

#. 访问修饰符必须为public，不写默认为public；
#. 该元素的类型只能是基本数据类型、String、Class、枚举类型、注解类型（体现了注解的嵌套效果）以及上述类型的一维数组；
#. 该元素的名称一般定义为名词，如果注解中只有一个元素，请把名字起为value（后面使用会带来便利操作）；
#. ()不是定义方法参数的地方，也不能在括号中定义任何参数，仅仅只是一个特殊的语法；
#. default代表默认值，值必须和第2点定义的类型一致；
#. 如果没有默认值，代表后续使用注解时必须给该类型元素赋值

常用的元注解
+++++++++++++
    元注解：专门修饰注解的注解。
@Target
-------
@Target注解，是专门用来限定某个自定义注解能够被应用在哪些Java元素上面的。

它使用一个枚举类型定义如下：

.. code:: java

  public enum ElementType {
      /** 类，接口（包括注解类型）或枚举的声明 */
      TYPE,
      /** 属性的声明 */
      FIELD,
      /** 方法的声明 */
      METHOD,
      /** 方法形式参数声明 */
      PARAMETER,
      /** 构造方法的声明 */
      CONSTRUCTOR,
      /** 局部变量声明 */
      LOCAL_VARIABLE,
      /** 注解类型声明 */
      ANNOTATION_TYPE,
      /** 包的声明 */
      PACKAGE
  }

示例

.. code:: java

  //@CherryAnnotation被限定只能使用在类、接口或方法上面
  @Target(value = {ElementType.TYPE,ElementType.METHOD})
  public @interface CherryAnnotation {
      String name();
      int age() default 18;
      int[] array();
  }

@Retention
-----------
@Retention注解，翻译为持久力、保持力。即用来修饰自定义注解的生命力。

注解的生命周期有三个阶段：

#. Java源文件阶段；
#. 编译到class文件阶段；
#. 运行期阶段。

同样使用了RetentionPolicy枚举类型定义了三个阶段：

.. code:: java

  public enum RetentionPolicy {
      /**
       * （注解将被编译器忽略掉）
       */
      SOURCE,
      /**
       * （注解将被编译器记录在class文件中，但在运行时不会被虚拟机保留，这是一个默认的行为）
       */
      CLASS,
      /**
       * （注解将被编译器记录在class文件中，而且在运行时会被虚拟机保留，因此它们能通过反射被读取到）
       * @see java.lang.reflect.AnnotatedElement
       */
      RUNTIME
  }

#. 如果一个注解被定义为RetentionPolicy.SOURCE，则它将被限定在Java源文件中，那么这个注解即不会参与编译也不会在运行期起任何作用，这个注解就和一个注释是一样的效果，只能被阅读Java文件的人看到；
#. 如果一个注解被定义为RetentionPolicy.CLASS，则它将被编译到Class文件中，那么编译器可以在编译时根据注解做一些处理动作，但是运行时JVM（Java虚拟机）会忽略它，我们在运行期也不能读取到；
#. 如果一个注解被定义为RetentionPolicy.RUNTIME，那么这个注解可以在运行期的加载阶段被加载到Class对象中。那么在程序运行阶段，我们可以通过反射得到这个注解，并通过判断是否有这个注解或这个注解中属性的值，从而执行不同的程序代码段。我们实际开发中的自定义注解几乎都是使用的RetentionPolicy.RUNTIME；
#. 在默认的情况下，自定义注解是使用的RetentionPolicy.CLASS。

@Documented
------------
@Documented注解，是被用来指定自定义注解是否能随着被定义的java文件生成到JavaDoc文档当中。

@Inherited
-----------
@Inherited注解，是指定某个自定义注解如果写在了父类的声明部分，那么子类的声明部分也能自动拥有该注解。@Inherited注解只对那些@Target被定义为ElementType.TYPE的自定义注解起作用。

自定义注解的配置使用
++++++++++++++++++++
在具体的Java类上使用注解
------------------------
.. code:: java

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.METHOD})
  @Documented
  public @interface CherryAnnotation {
      String name();
      int age() default 18;
      int[] score();
  }
  
  public class Student {
      @CherryAnnotation(name = "cherry-peng",age = 23,score = {99,66,77})
      public void study(int times){
          for(int i = 0; i < times; i++){
              System.out.println("Good Good Study, Day Day Up!");
          }
      }
  }

简单分析下：

#. CherryAnnotation的@Target定义为ElementType.METHOD，那么它书写的位置应该在方法定义的上方，即：public void study(int times)之上；
#. 由于我们在CherryAnnotation中定义的有注解类型元素，而且有些元素是没有默认值的，这要求我们在使用的时候必须在标记名后面打上()，并且在()内以“元素名=元素值“的形式挨个填上所有没有默认值的注解类型元素（有默认值的也可以填上重新赋值），中间用“,”号分割；

特殊语法
----------
* 特殊语法一：
如果注解本身没有注解类型元素，那么在使用注解的时候可以省略()，直接写为：@注解名，它和标准语法@注解名()等效！

.. code:: java

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  @Documented
  public @interface FirstAnnotation {
  }
  
  //等效于@FirstAnnotation()
  @FirstAnnotation
  public class JavaBean{
  	//省略实现部分
  }  

* 特殊语法二：
如果注解本本身只有一个注解类型元素，而且命名为value，那么在使用注解的时候可以直接使用：@注解名(注解值)，其等效于：@注解名(value = 注解值)

.. code:: java

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  @Documented
  public @interface SecondAnnotation {
  	String value();
  }
  
  //等效于@ SecondAnnotation(value = "this is second annotation")
  @SecondAnnotation("this is annotation")
  public class JavaBean{
  	//省略实现部分
  }

* 特殊用法三：
如果注解中的某个注解类型元素是一个数组类型，在使用时又出现只需要填入一个值的情况，那么在使用注解时可以直接写为：@注解名(类型名 = 类型值)，它和标准写法：@注解名(类型名 = {类型值})等效！

.. code:: java

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.TYPE})
  @Documented
  public @interface ThirdAnnotation {
  	String[] name();
  }
  
  //等效于@ ThirdAnnotation(name = {"this is third annotation"})
  @ ThirdAnnotation(name = "this is third annotation")
  public class JavaBean{
  	//省略实现部分
  }

* 特殊用法四：
如果一个注解的@Target是定义为Element.PACKAGE，那么这个注解是配置在package-info.java中的，而不能直接在某个类的package代码上面配置。

自定义注解的运行时解析
+++++++++++++++++++++++
    只有当注解的保持力处于运行阶段，即使用@Retention(RetentionPolicy.RUNTIME)修饰注解时，才能在JVM运行时，检测到注解，并进行一系列特殊操作。

.. code:: java

  @Retention(RetentionPolicy.RUNTIME)
  @Target(value = {ElementType.METHOD})
  @Documented
  public @interface CherryAnnotation {
      String name();
      int age() default 18;
      int[] score();
  }
  
  package pojos;
  public class Student {
      @CherryAnnotation(name = "cherry-peng",age = 23,score = {99,66,77})
      public void study(int times){
          for(int i = 0; i < times; i++){
              System.out.println("Good Good Study, Day Day Up!");
          }
      }
  }
  
  public class TestAnnotation {
      public static void main(String[] args){
          try {
              //获取Student的Class对象
              Class stuClass = Class.forName("pojos.Student");
  
              //说明一下，这里形参不能写成Integer.class，应写为int.class
              Method stuMethod = stuClass.getMethod("study",int.class);
  
              if(stuMethod.isAnnotationPresent(CherryAnnotation.class)){
                  System.out.println("Student类上配置了CherryAnnotation注解！");
                  //获取该元素上指定类型的注解
                  CherryAnnotation cherryAnnotation = stuMethod.getAnnotation(CherryAnnotation.class);
                  System.out.println("name: " + cherryAnnotation.name() + ", age: " + cherryAnnotation.age()
                      + ", score: " + cherryAnnotation.score()[0]);
              }else{
                  System.out.println("Student类上没有配置CherryAnnotation注解！");
              }
          } catch (ClassNotFoundException e) {
              e.printStackTrace();
          } catch (NoSuchMethodException e) {
              e.printStackTrace();
          }
      }
  }  
分析：

#. 如果我们要获得的注解是配置在方法上的，那么我们要从Method对象上获取；如果是配置在属性上，就需要从该属性对应的Field对象上去获取，如果是配置在类型上，需要从Class对象上去获取。总之在谁身上，就从谁身上去获取！
#. isAnnotationPresent(Class<? extends Annotation> annotationClass)方法是专门判断该元素上是否配置有某个指定的注解；
#. getAnnotation(Class<A> annotationClass)方法是获取该元素上指定的注解。之后再调用该注解的注解类型元素方法就可以获得配置时的值数据；
#. 反射对象上还有一个方法getAnnotations()，该方法可以获得该对象身上配置的所有的注解。它会返回给我们一个注解数组，需要注意的是该数组的类型是Annotation类型，这个Annotation是一个来自于java.lang.annotation包的接口。
