====
UML的图例
====
#. 用例图
#. 类图
   
   .. image:: images/Class_diagram.gif
   
   类图通过显示出系统的类以及这些类之间的关系来表示系统。类图是静态的－它们显示出什么可以产生影响但不会告诉你什么时候产生影响

   UML类的符号是一个被划分成三块的方框：类名，属性，和操作。抽象类的名字是斜体的。类之间的关系是连接线。
   
   + 类（Class）
     
     在面向对象编程中，类是对现实世界中一组具有相同特征的物体的抽象。

     .. image:: images/Class.png
   + 接口（Interface）
     
     接口是一种特殊的类，具有类的结构但不可被实例化，只可以被实现（继承）。在UML中，接口使用一个带有名称的小圆圈来进行表示。

     .. image:: images/Interface.png
   + 类图中关系（relation）
              
     * 泛化（Generalization）
       
       【泛化关系】：是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。

       【箭头指向】：带三角箭头的实线，箭头指向父类
     * 实现（Realization）
       
       【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.

       【箭头指向】：带三角箭头的虚线，箭头指向接口
     * 关联（Association)
       
       【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法.表示两种类的实例间的关系。如果一个类的实例必须要用另一个类的实例才能完成工作时就要用关联。

        双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。
       【代码体现】：成员变量

       【箭头及指向】：带普通箭头的实心线，指向被拥有者
     * 聚合（Aggregation）
       
       【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。

        聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。

       【代码体现】：成员变量
       
       【箭头及指向】：带空心菱形的实心线，菱形指向具有整体性质的类。
     * 组合(Composition)
       
       【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。
       
        组合关系是关联关系的一种，是比聚合关系还要强的关系，

       【代码体现】：成员变量

       【箭头及指向】：带实心菱形的实线，菱形指向整体
     * 依赖(Dependency)
       
       【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.

       【代码表现】：局部变量、方法的参数或者对静态方法的调用

       【箭头及指向】：带箭头的虚线，指向被使用者

      各种关系的强弱顺序：
       泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖
   + 类图的分类
     
     * 领域UML类图（和开发无关）
     * 实现UML类图
   + 总结
     
     #. 软件分析与设计是编码前的两个阶段，其中分析仅与业务有关，而与技术无关。设计以分析为基础，主要与具体技术有关。
     #. 分析阶段由分析师绘制领域UML类图，设计阶段由设计师绘制实现UML类图。
     #. 领域UML类图表示系统的静态领域结构，其中的类不与最终程序中的类对应；设计UML类图表示系统的技术架构，是程序员的编码依据，其中的类与系统中的类对应。
     #. 领域UML类图中类的属性与操作仅关注与业务相关的部分，实现UML类图中的属性与操作要包括最终需要实现的全部方法与操作。
#. 